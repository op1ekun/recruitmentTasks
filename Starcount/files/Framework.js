!function(e){function r(n){if(t[n])return t[n].exports;var o=t[n]={exports:{},id:n,loaded:!1};return e[n].call(o.exports,o,o.exports,r),o.loaded=!0,o.exports}var t={};return r.m=e,r.c=t,r.p="",r(0)}([function(e,r,t){"use strict";function n(e){if(e&&e.__esModule)return e;var r={};if(null!=e)for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(r[t]=e[t]);return r["default"]=e,r}function o(){var e=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];return u.setConfig(e),{render:u.render}}var i=t(1),u=n(i);window.Framework={create:o}},function(e,r,t){"use strict";function n(e){if(e&&e.__esModule)return e;var r={};if(null!=e)for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(r[t]=e[t]);return r["default"]=e,r}function o(e){var r=document.querySelector(d.template).innerHTML,t=l.compile(r),n=document.querySelector(e);return t(d.data).then(function(r){n.innerHTML=r,f.forEach(function(r){var t=n.querySelector(e+' *[data-event="'+r+'"]'),o=r.split(":"),i=a(o,2),u=i[0],c=i[1];t&&d[c]&&t.addEventListener(u,d[c])})})}function i(){var e=arguments.length<=0||void 0===arguments[0]?{data:{},template:""}:arguments[0];d=e}function u(){return d}Object.defineProperty(r,"__esModule",{value:!0});var a=function(){function e(e,r){var t=[],n=!0,o=!1,i=void 0;try{for(var u,a=e[Symbol.iterator]();!(n=(u=a.next()).done)&&(t.push(u.value),!r||t.length!==r);n=!0);}catch(c){o=!0,i=c}finally{try{!n&&a["return"]&&a["return"]()}finally{if(o)throw i}}return t}return function(r,t){if(Array.isArray(r))return r;if(Symbol.iterator in Object(r))return e(r,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();r.render=o,r.setConfig=i,r.getConfig=u;var c=t(2),l=n(c),f=["keyup:titleChanged","click:clearTitle"],d=void 0},function(e,r){"use strict";function t(e){return function(r){return new Promise(function(t,n){setTimeout(function(){try{!function(){var n=e;Object.keys(r).forEach(function(e){var t=new RegExp("{{"+e+"}}","g");n=n.replace(t,r[e])}),t(n.replace(/{{[a-zA-Z0-9]+}}/g,""))}()}catch(o){n(o)}},0)})}}Object.defineProperty(r,"__esModule",{value:!0}),r.compile=t}]);
//# sourceMappingURL=data:application/json;base64,
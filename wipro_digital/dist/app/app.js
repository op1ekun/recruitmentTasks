!function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return e[r].call(o.exports,o,o.exports,t),o.loaded=!0,o.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){"use strict";n(1)},function(e,t,n){"use strict";function r(e){var t=e.params,n=e.response;(0,c.updateForecast)({params:t,response:{city:n.city,singleForecast:n.list[s]}})}var o=function(){function e(e,t){var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(u){o=!0,a=u}finally{try{!r&&c["return"]&&c["return"]()}finally{if(o)throw a}}return n}return function(t,n){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return e(t,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),a=n(2),i=n(5),c=n(6),u=void 0,s=0;i.appEventHandlers.onSearch=function(e,t){c.viewState.loading=!0,r(u);var n=e.split(","),i=o(n,2),l=i[0],d=i[1];(0,a.getForecast)(l,d,t).then(function(e){u=e,s=0,c.viewState.prev=!1,c.viewState.loading=!1,r(u)})},c.forecastEventHandlers.onNext=function(){s+1<u.response.list.length?(s++,c.viewState.next=!0,c.viewState.prev=!0):c.viewState.next=!1,r(u)},c.forecastEventHandlers.onPrev=function(){s-1>=0?(s--,c.viewState.next=!0,c.viewState.prev=!0):c.viewState.prev=!1,r(u)},(0,a.getForecast)().then(function(e){u=e,s=0,c.viewState.loading=!1,c.viewState.prev=!1,r(u)})},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t,n){return"http://api.openweathermap.org/data/2.5/forecast?q="+e+","+t+"&mode=json&appid="+c["default"].apiKey+"&units="+n}function a(){var e=arguments.length<=0||void 0===arguments[0]?"London":arguments[0],t=arguments.length<=1||void 0===arguments[1]?"":arguments[1],n=arguments.length<=2||void 0===arguments[2]?u.METRIC:arguments[2],r=o(e,t,n);return fetch(r,{method:"get"}).then(function(r){return r.json().then(function(r){return{response:r,params:{city:e,country:t,units:n}}})})["catch"](function(e){console.error(e)})}Object.defineProperty(t,"__esModule",{value:!0}),t.getForecast=a;var i=n(3),c=r(i),u=n(4)},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t["default"]={apiKey:"3f697675424c3d0afeafbe02610ce274"}},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.IMPERIAL="imperial",t.METRIC="metric"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.appEventHandlers=void 0;var r=n(4),o=t.appEventHandlers={onSearch:null,onRefresh:null},a=document.querySelector("#searchText"),i=document.querySelector("#search"),c=document.querySelector("#units"),u=r.METRIC;c.addEventListener("click",function(e){var t=e.target.nodeName.toLowerCase();u="input"===t?e.target.value:e.target.control.value}),a.addEventListener("keypress",function(e){13===e.keyCode&&o.onSearch&&a.value&&(o.onSearch(a.value,u),a.value="")}),i.addEventListener("click",function(){o.onSearch&&a.value&&(o.onSearch(a.value,u),a.value="")})},function(e,t,n){"use strict";function r(e){var t=e.response,n=e.params,r=t.city,o=r.name,a=r.country,i=t.singleForecast,g=i.rain,M=i.main,w=i.clouds,x=i.dt,E=new Date(1e3*x),T=E.getUTCFullYear(),L=E.getUTCDate();L=10>L?"0"+L:L;var H=E.getUTCMonth()+1;H=10>H?"0"+H:H;var q=E.getUTCHours();q=10>q?"0"+q:q;var P=E.getUTCMinutes();P=10>P?"0"+P:P;var b=E.getUTCSeconds();b=10>b?"0"+b:b,s.innerHTML=o+", "+a,l.innerHTML=(g&&g["3h"]||0)+" mm",d.innerHTML=""+Math.round(M.temp)+(n.units===c.IMPERIAL?"&deg;F":"&deg;C"),v.innerHTML=Math.round(M.pressure)+" hPa",f.innerHTML=w.all+"%",p.innerHTML=L+"/"+H+"/"+T,m.innerHTML=q+":"+P+":"+b,y.disabled=!h.next,S.disabled=!h.prev,u.className=h.loading?u.className+" loading":u.className.replace(/\sloading/,"")}function o(e){r(e)}function a(e){r(e)}function i(e){r(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.forecastEventHandlers=t.viewState=void 0,t.updateForecast=o,t.getNextData=a,t.getPrevData=i;var c=n(4),u=document.querySelector(".forecast"),s=document.querySelector(".forecast .city"),l=document.querySelector(".rain > span"),d=document.querySelector(".temp > span"),v=document.querySelector(".pres > span"),f=document.querySelector(".clouds > span"),p=document.querySelector(".time > h2"),m=document.querySelector(".time > h3"),y=document.querySelector(".actions > .next"),S=document.querySelector(".actions > .prev"),h=t.viewState={next:!0,prev:!0,loading:!0},g=t.forecastEventHandlers={onNext:null,onPrev:null};y.addEventListener("click",function(){g.onNext&&g.onNext()}),S.addEventListener("click",function(){g.onPrev&&g.onPrev()})}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vYXBwL2FwcC5qcyIsIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgNTc2NzUzYjU5ZDQyZjY3MjlhMDEiLCJ3ZWJwYWNrOi8vLy4vYXBwL2FwcC5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvYXBwLmNvbnRyb2xsZXJzLmpzIiwid2VicGFjazovLy8uL2FwcC9mb3JlY2FzdC9mb3JlY2FzdC5zZXJ2aWNlcy5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvY29uZmlnLmpzIiwid2VicGFjazovLy8uL2FwcC9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL2FwcC52aWV3cy5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvZm9yZWNhc3QvZm9yZWNhc3Qudmlld3MuanMiXSwibmFtZXMiOlsibW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImluc3RhbGxlZE1vZHVsZXMiLCJleHBvcnRzIiwibW9kdWxlIiwiaWQiLCJsb2FkZWQiLCJjYWxsIiwibSIsImMiLCJwIiwidXBkYXRlRm9yZWNhc3RWaWV3IiwiX3JlZiIsInBhcmFtcyIsInJlc3BvbnNlIiwiX2ZvcmVjYXN0Vmlld3MiLCJ1cGRhdGVGb3JlY2FzdCIsImNpdHkiLCJzaW5nbGVGb3JlY2FzdCIsImxpc3QiLCJjdXJyZW50Rm9yY2FzdEluZGV4IiwiX3NsaWNlZFRvQXJyYXkiLCJzbGljZUl0ZXJhdG9yIiwiYXJyIiwiaSIsIl9hcnIiLCJfbiIsIl9kIiwiX2UiLCJ1bmRlZmluZWQiLCJfcyIsIl9pIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJuZXh0IiwiZG9uZSIsInB1c2giLCJ2YWx1ZSIsImxlbmd0aCIsImVyciIsIkFycmF5IiwiaXNBcnJheSIsIk9iamVjdCIsIlR5cGVFcnJvciIsIl9mb3JlY2FzdFNlcnZpY2VzIiwiX2FwcFZpZXdzIiwiY3VycmVudERhdGEiLCJhcHBFdmVudEhhbmRsZXJzIiwib25TZWFyY2giLCJzZWFyY2hUZXh0IiwidW5pdHMiLCJ2aWV3U3RhdGUiLCJsb2FkaW5nIiwiX3NlYXJjaFRleHQkc3BsaXQiLCJzcGxpdCIsIl9zZWFyY2hUZXh0JHNwbGl0MiIsImNvdW50cnkiLCJnZXRGb3JlY2FzdCIsInRoZW4iLCJmb3JlY2FzdERhdGEiLCJwcmV2IiwiZm9yZWNhc3RFdmVudEhhbmRsZXJzIiwib25OZXh0Iiwib25QcmV2IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiZ2V0UXVlcnlVUkwiLCJfY29uZmlnMiIsImFwaUtleSIsImFyZ3VtZW50cyIsIl9jb25zdGFudHMiLCJNRVRSSUMiLCJxdWVyeVVSTCIsImZldGNoIiwibWV0aG9kIiwianNvbiIsInBhcnNlZERhdGEiLCJjb25zb2xlIiwiZXJyb3IiLCJkZWZpbmVQcm9wZXJ0eSIsIl9jb25maWciLCJJTVBFUklBTCIsIm9uUmVmcmVzaCIsInNlYXJjaFRleHRJbnB1dCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInNlYXJjaEJ1dHRvbiIsInVuaXRzQ250IiwidW5pdHNGb3JtYXQiLCJhZGRFdmVudExpc3RlbmVyIiwiZXYiLCJub2RlTmFtZSIsInRhcmdldCIsInRvTG93ZXJDYXNlIiwiY29udHJvbCIsImtleUNvZGUiLCJyZW5kZXIiLCJfcmVzcG9uc2UkY2l0eSIsIm5hbWUiLCJfcmVzcG9uc2Ukc2luZ2xlRm9yZWMiLCJyYWluIiwibWFpbiIsImNsb3VkcyIsImR0IiwiZGF0ZSIsIkRhdGUiLCJ5ZWFyIiwiZ2V0VVRDRnVsbFllYXIiLCJkYXkiLCJnZXRVVENEYXRlIiwibW9udGgiLCJnZXRVVENNb250aCIsImhvdXJzIiwiZ2V0VVRDSG91cnMiLCJtaW51dGVzIiwiZ2V0VVRDTWludXRlcyIsInNlY29uZHMiLCJnZXRVVENTZWNvbmRzIiwiY2l0eUNudCIsImlubmVySFRNTCIsInJhaW5DbnQiLCJ0ZW1wQ250IiwiTWF0aCIsInJvdW5kIiwidGVtcCIsInByZXNDbnQiLCJwcmVzc3VyZSIsImNsb3Vkc0NudCIsImFsbCIsImRhdGVDbnQiLCJ0aW1lQ250IiwibmV4dEJ1dHRvbiIsImRpc2FibGVkIiwicHJldkJ1dHRvbiIsImZvcmVjYXN0Q250IiwiY2xhc3NOYW1lIiwicmVwbGFjZSIsImdldE5leHREYXRhIiwibmV4dERhdGEiLCJnZXRQcmV2RGF0YSIsInByZXZEYXRhIl0sIm1hcHBpbmdzIjoiQ0FBUyxTQUFVQSxHQ0luQixRQUFBQyxHQUFBQyxHQUdBLEdBQUFDLEVBQUFELEdBQ0EsTUFBQUMsR0FBQUQsR0FBQUUsT0FHQSxJQUFBQyxHQUFBRixFQUFBRCxJQUNBRSxXQUNBRSxHQUFBSixFQUNBSyxRQUFBLEVBVUEsT0FOQVAsR0FBQUUsR0FBQU0sS0FBQUgsRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUgsR0FHQUksRUFBQUUsUUFBQSxFQUdBRixFQUFBRCxRQXZCQSxHQUFBRCxLQXFDQSxPQVRBRixHQUFBUSxFQUFBVCxFQUdBQyxFQUFBUyxFQUFBUCxFQUdBRixFQUFBVSxFQUFBLEdBR0FWLEVBQUEsS0RNTSxTQUFTSSxFQUFRRCxFQUFTSCxHQUUvQixZRTdDREEsR0FBQSxJRm1ETSxTQUFTSSxFQUFRRCxFQUFTSCxHQUUvQixZR3ZDRCxTQUFTVyxHQUFUQyxHSCtESyxHRy9Ed0JDLEdBQUFELEVBQUFDLE9BQVFDLEVBQUFGLEVBQUFFLFVBR2pDLEVBQUFDLEVBQUFDLGlCQUNJSCxPQUFRQSxFQUNSQyxVQUNJRyxLQUFNSCxFQUFTRyxLQUNmQyxlQUFnQkosRUFBU0ssS0FBS0MsTUhrQ3pDLEdBQUlDLEdBQWlCLFdBQWMsUUFBU0MsR0FBY0MsRUFBS0MsR0FBSyxHQUFJQyxNQUFlQyxHQUFLLEVBQVVDLEdBQUssRUFBV0MsRUFBS0MsTUFBVyxLQUFNLElBQUssR0FBaUNDLEdBQTdCQyxFQUFLUixFQUFJUyxPQUFPQyxjQUFtQlAsR0FBTUksRUFBS0MsRUFBR0csUUFBUUMsUUFBb0JWLEVBQUtXLEtBQUtOLEVBQUdPLFFBQVliLEdBQUtDLEVBQUthLFNBQVdkLEdBQTNERSxHQUFLLElBQW9FLE1BQU9hLEdB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Q3FHLEVBQVdELFVBQVduRixFQUFVUyxLQUVoQzRFLEVBQVlDLFVBQVl0RixFQUFVQyxRQUMzQm9GLEVBQVlDLFVBQVosV0FDSEQsRUFBWUMsVUFBVUMsUUFBUSxZQUFhLElBVTVDLFFBQVMxSCxHQUFlMkMsR0FFM0J1QyxFQUFPdkMsR0FVSixRQUFTZ0YsR0FBWUMsR0FFeEIxQyxFQUFPMEMsR0FVSixRQUFTQyxHQUFZQyxHQUV4QjVDLEVBQU80QyxHUmlQVnBHLE9BQU91QyxlQUFlOUUsRUFBUyxjQUMzQmtDLE9BQU8sSUFFWGxDLEVBQVEwRCxzQkFBd0IxRCxFQUFRZ0QsVUFBWXRCLE9BQ3BEMUIsRVEvUWVhLGlCUmdSZmIsRVFwUWV3SSxjUnFRZnhJLEVRelBlMEksYUE1R2hCLElBQUFyRSxHQUFBeEUsRUFBQSxHQUVNd0ksRUFBY2xELFNBQVNDLGNBQWMsYUFDckNpQyxFQUFVbEMsU0FBU0MsY0FBYyxtQkFDakNtQyxFQUFVcEMsU0FBU0MsY0FBYyxnQkFDakNvQyxFQUFVckMsU0FBU0MsY0FBYyxnQkFDakN3QyxFQUFVekMsU0FBU0MsY0FBYyxnQkFDakMwQyxFQUFZM0MsU0FBU0MsY0FBYyxrQkFDbkM0QyxFQUFVN0MsU0FBU0MsY0FBYyxjQUNqQzZDLEVBQVU5QyxTQUFTQyxjQUFjLGNBQ2pDOEMsRUFBYS9DLFNBQVNDLGNBQWMsb0JBQ3BDZ0QsRUFBYWpELFNBQVNDLGNBQWMsb0JBRS9CcEMsRUFBQWhELEVBQUFnRCxXQUNQakIsTUFBTSxFQUNOMEIsTUFBTSxFQUNOUixTQUFTLEdBR0ZTLEVBQUExRCxFQUFBMEQsdUJBQ1BDLE9BQVEsS0FDUkMsT0FBUSxLQTZGWnNFLEdBQVcxQyxpQkFBaUIsUUFBUyxXQUk3QjlCLEVBQXNCQyxRQUN0QkQsRUFBc0JDLFdBSTlCeUUsRUFBVzVDLGlCQUFpQixRQUFTLFdBSTdCOUIsRUFBc0JFLFFBQ3RCRixFQUFzQkUiLCJmaWxlIjoiYXBwL2FwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9LFxuLyoqKioqKi8gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bG9hZGVkOiBmYWxzZVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0X193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblxuLyoqKi8gfSxcbi8qIDEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciBfc2xpY2VkVG9BcnJheSA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gc2xpY2VJdGVyYXRvcihhcnIsIGkpIHsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0pIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfSByZXR1cm4gZnVuY3Rpb24gKGFyciwgaSkgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IHJldHVybiBhcnI7IH0gZWxzZSBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSB7IHJldHVybiBzbGljZUl0ZXJhdG9yKGFyciwgaSk7IH0gZWxzZSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9IH07IH0oKTtcblx0XG5cdHZhciBfZm9yZWNhc3RTZXJ2aWNlcyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHR2YXIgX2FwcFZpZXdzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblx0XG5cdHZhciBfZm9yZWNhc3RWaWV3cyA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cdFxuXHQvLyBob2xkcyBjdXJyZW50IGZvcmVjYXN0IGRhdGEgZm9ybSBBUElcblx0dmFyIGN1cnJlbnREYXRhID0gdm9pZCAwO1xuXHQvLyB0aGUgaW5kZXggb2YgdGhlIGN1cnJlbnQgKHNpbmdsZSkgZm9yZWNhc3Rcblx0dmFyIGN1cnJlbnRGb3JjYXN0SW5kZXggPSAwO1xuXHRcblx0LyoqXHJcblx0ICogUHJlcGFyZXMgZGF0YSBmb3IgdGhlIHZpZXcsIGFuZCBhbmQgdXBkYXRlcyBpdC5cclxuXHQgKiBcclxuXHQgKiBAcGFyYW0gIHtPYmplY3R9IGZvcmVjYXN0RGF0YSAgICBiZXNwb2tlIGRhdGEgb2JqZWN0IGNvbnRhaW5pbmcgYm90aCB0aGUgb3JpZ2luYWwgcmVzcG9uc2UgYW5kIHF1ZXJ5IHBhcmFtc1xyXG5cdCAqIEByZXR1cm4ge3VuZGVmaW5lZH1cclxuXHQgKi9cblx0ZnVuY3Rpb24gdXBkYXRlRm9yZWNhc3RWaWV3KF9yZWYpIHtcblx0ICAgICd1c2Ugc3RyaWN0Jztcblx0XG5cdCAgICB2YXIgcGFyYW1zID0gX3JlZi5wYXJhbXM7XG5cdCAgICB2YXIgcmVzcG9uc2UgPSBfcmVmLnJlc3BvbnNlO1xuXHQgICAgKDAsIF9mb3JlY2FzdFZpZXdzLnVwZGF0ZUZvcmVjYXN0KSh7XG5cdCAgICAgICAgcGFyYW1zOiBwYXJhbXMsXG5cdCAgICAgICAgcmVzcG9uc2U6IHtcblx0ICAgICAgICAgICAgY2l0eTogcmVzcG9uc2UuY2l0eSxcblx0ICAgICAgICAgICAgc2luZ2xlRm9yZWNhc3Q6IHJlc3BvbnNlLmxpc3RbY3VycmVudEZvcmNhc3RJbmRleF1cblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0fVxuXHRcblx0LyoqXHJcblx0ICogQSBoYW5kbGVyIGZvciB0aGUgb24gc2VhcmNoIGV2ZW50LlxyXG5cdCAqIENhbGxzIHNlcnZpY2UgbWV0aG9kIHRvIGdldCBmb3JlY2FzdCBkYXRhIGZyb20gQVBJLlxyXG5cdCAqIFxyXG5cdCAqIEBwYXJhbSAge1N0cmluZ30gc2VhcmNoVGV4dCAgdGhlIHRleHQgdGhhdCB1c2VyIGVudGVyZWQgaW4gdGhlIHNlYXJjaCBib3hcclxuXHQgKiBAcGFyYW0gIHtTdHJpbmd9IHVuaXRzICAgICAgIGVpdGhlciAnbWV0cmljJyBvciAnaW1wZXJpYWwnXHJcblx0ICogQHJldHVybiB7dW5kZWZpbmVkfVxyXG5cdCAqL1xuXHRfYXBwVmlld3MuYXBwRXZlbnRIYW5kbGVycy5vblNlYXJjaCA9IGZ1bmN0aW9uIChzZWFyY2hUZXh0LCB1bml0cykge1xuXHQgICAgJ3VzZSBzdHJpY3QnO1xuXHRcblx0ICAgIF9mb3JlY2FzdFZpZXdzLnZpZXdTdGF0ZS5sb2FkaW5nID0gdHJ1ZTtcblx0ICAgIHVwZGF0ZUZvcmVjYXN0VmlldyhjdXJyZW50RGF0YSk7XG5cdFxuXHQgICAgdmFyIF9zZWFyY2hUZXh0JHNwbGl0ID0gc2VhcmNoVGV4dC5zcGxpdCgnLCcpO1xuXHRcblx0ICAgIHZhciBfc2VhcmNoVGV4dCRzcGxpdDIgPSBfc2xpY2VkVG9BcnJheShfc2VhcmNoVGV4dCRzcGxpdCwgMik7XG5cdFxuXHQgICAgdmFyIGNpdHkgPSBfc2VhcmNoVGV4dCRzcGxpdDJbMF07XG5cdCAgICB2YXIgY291bnRyeSA9IF9zZWFyY2hUZXh0JHNwbGl0MlsxXTtcblx0XG5cdFxuXHQgICAgKDAsIF9mb3JlY2FzdFNlcnZpY2VzLmdldEZvcmVjYXN0KShjaXR5LCBjb3VudHJ5LCB1bml0cykudGhlbihmdW5jdGlvbiAoZm9yZWNhc3REYXRhKSB7XG5cdCAgICAgICAgLy8gcmVmcmVzaCBkYXRhXG5cdCAgICAgICAgY3VycmVudERhdGEgPSBmb3JlY2FzdERhdGE7XG5cdCAgICAgICAgLy8gcmVzZXQgaW5kZXhcblx0ICAgICAgICBjdXJyZW50Rm9yY2FzdEluZGV4ID0gMDtcblx0XG5cdCAgICAgICAgX2ZvcmVjYXN0Vmlld3Mudmlld1N0YXRlLnByZXYgPSBmYWxzZTtcblx0ICAgICAgICBfZm9yZWNhc3RWaWV3cy52aWV3U3RhdGUubG9hZGluZyA9IGZhbHNlO1xuXHQgICAgICAgIHVwZGF0ZUZvcmVjYXN0VmlldyhjdXJyZW50RGF0YSk7XG5cdCAgICB9KTtcblx0fTtcblx0XG5cdC8qKlxyXG5cdCAqIEEgaGFuZGxlciBmb3IgdGhlIG9uIG5leHQgZXZlbnQuXHJcblx0ICogVXBkYXRlcyBmaXJlY3QgdmlldyBpZiB1cGRhdGUgaXMgYXZhaWxhYmxlLlxyXG5cdCAqIFxyXG5cdCAqIEByZXR1cm4ge3VuZGVmaW5lZH1cclxuXHQgKi9cblx0X2ZvcmVjYXN0Vmlld3MuZm9yZWNhc3RFdmVudEhhbmRsZXJzLm9uTmV4dCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICd1c2Ugc3RyaWN0Jztcblx0XG5cdCAgICBpZiAoY3VycmVudEZvcmNhc3RJbmRleCArIDEgPCBjdXJyZW50RGF0YS5yZXNwb25zZS5saXN0Lmxlbmd0aCkge1xuXHQgICAgICAgIGN1cnJlbnRGb3JjYXN0SW5kZXgrKztcblx0ICAgICAgICBfZm9yZWNhc3RWaWV3cy52aWV3U3RhdGUubmV4dCA9IHRydWU7XG5cdCAgICAgICAgX2ZvcmVjYXN0Vmlld3Mudmlld1N0YXRlLnByZXYgPSB0cnVlO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgICBfZm9yZWNhc3RWaWV3cy52aWV3U3RhdGUubmV4dCA9IGZhbHNlO1xuXHQgICAgfVxuXHRcblx0ICAgIHVwZGF0ZUZvcmVjYXN0VmlldyhjdXJyZW50RGF0YSk7XG5cdH07XG5cdFxuXHQvKipcclxuXHQgKiBBIGhhbmRsZXIgZm9yIHRoZSBvbiBwcmV2IGV2ZW50LlxyXG5cdCAqIFVwZGF0ZXMgZmlyZWN0IHZpZXcgaWYgdXBkYXRlIGlzIGF2YWlsYWJsZS5cclxuXHQgKiBcclxuXHQgKiBAcmV0dXJuIHt1bmRlZmluZWR9XHJcblx0ICovXG5cdF9mb3JlY2FzdFZpZXdzLmZvcmVjYXN0RXZlbnRIYW5kbGVycy5vblByZXYgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAndXNlIHN0cmljdCc7XG5cdFxuXHQgICAgaWYgKGN1cnJlbnRGb3JjYXN0SW5kZXggLSAxID49IDApIHtcblx0ICAgICAgICBjdXJyZW50Rm9yY2FzdEluZGV4LS07XG5cdCAgICAgICAgX2ZvcmVjYXN0Vmlld3Mudmlld1N0YXRlLm5leHQgPSB0cnVlO1xuXHQgICAgICAgIF9mb3JlY2FzdFZpZXdzLnZpZXdTdGF0ZS5wcmV2ID0gdHJ1ZTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgICAgX2ZvcmVjYXN0Vmlld3Mudmlld1N0YXRlLnByZXYgPSBmYWxzZTtcblx0ICAgIH1cblx0XG5cdCAgICB1cGRhdGVGb3JlY2FzdFZpZXcoY3VycmVudERhdGEpO1xuXHR9O1xuXHRcblx0Ly8gaW5pdFxuXHQoMCwgX2ZvcmVjYXN0U2VydmljZXMuZ2V0Rm9yZWNhc3QpKCkudGhlbihmdW5jdGlvbiAoZm9yZWNhc3REYXRhKSB7XG5cdCAgICAndXNlIHN0cmljdCc7XG5cdFxuXHQgICAgLy8gcmVmcmVzaCBkYXRhXG5cdFxuXHQgICAgY3VycmVudERhdGEgPSBmb3JlY2FzdERhdGE7XG5cdCAgICAvLyByZXNldCBpbmRleFxuXHQgICAgY3VycmVudEZvcmNhc3RJbmRleCA9IDA7XG5cdFxuXHQgICAgLy8gc2V0dXAgdGhlIHZpZXdcblx0ICAgIF9mb3JlY2FzdFZpZXdzLnZpZXdTdGF0ZS5sb2FkaW5nID0gZmFsc2U7XG5cdCAgICBfZm9yZWNhc3RWaWV3cy52aWV3U3RhdGUucHJldiA9IGZhbHNlO1xuXHQgICAgdXBkYXRlRm9yZWNhc3RWaWV3KGN1cnJlbnREYXRhKTtcblx0fSk7XG5cbi8qKiovIH0sXG4vKiAyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLmdldEZvcmVjYXN0ID0gZ2V0Rm9yZWNhc3Q7XG5cdFxuXHR2YXIgX2NvbmZpZyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cdFxuXHR2YXIgX2NvbmZpZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb25maWcpO1xuXHRcblx0dmFyIF9jb25zdGFudHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdC8qKlxyXG5cdCAqIFBhcnNlIGFuZCByZXR1cm4gYW4gQVBJIHF1ZXJ5IFVSTC5cclxuXHQgKiBcclxuXHQgKiBAcGFyYW0gIHtTdHJpbmd9IGNpdHkgICAgdGhlIG5hbWUgb2YgYSBjaXR5XHJcblx0ICogQHBhcmFtICB7U3RyaW5nfSBjb3VudHJ5IHRoZSBuYW1lIG9mIGEgY291bnRyeVxyXG5cdCAqIEBwYXJhbSAge1N0cmluZ30gdW5pdHMgICB1bml0cyBmb3JtYXQsIGVpdGhlciBtZXRyaWMgb3IgaW1wZXJpYWxcclxuXHQgKiBAcmV0dXJuIHtTdHJpbmd9ICAgICAgICAgdGhlIHBhcnNlZCB0ZW1wbGF0ZSBzdHJpbmdcclxuXHQgKi9cblx0ZnVuY3Rpb24gZ2V0UXVlcnlVUkwoY2l0eSwgY291bnRyeSwgdW5pdHMpIHtcblx0ICAgICd1c2Ugc3RyaWN0Jztcblx0XG5cdCAgICByZXR1cm4gJ2h0dHA6Ly9hcGkub3BlbndlYXRoZXJtYXAub3JnL2RhdGEvMi41L2ZvcmVjYXN0P3E9JyArIGNpdHkgKyAnLCcgKyBjb3VudHJ5ICsgJyZtb2RlPWpzb24mYXBwaWQ9JyArIF9jb25maWcyLmRlZmF1bHQuYXBpS2V5ICsgJyZ1bml0cz0nICsgdW5pdHM7XG5cdH1cblx0XG5cdC8qKlxyXG5cdCAqIEdldCBmb3JlY2FzdCBkYXRhIGZyb20gYXBpIGZvciBnaXZlbiBsb2NhdGlvbi5cclxuXHQgKiBcclxuXHQgKiBAcGFyYW0gIHtTdHJpbmd9IGNpdHkgICAgdGhlIG5hbWUgb2YgYSBjaXR5LCBkZWZhdWx0cyB0byAnTG9uZG9uJ1xyXG5cdCAqIEBwYXJhbSAge1N0cmluZ30gY291bnRyeSB0aGUgbmFtZSBvZiBhIGNvdW50cnksIGRlZmF1bHRzIHRvICcnXHJcblx0ICogQHBhcmFtICB7U3RyaW5nfSB1bml0cyAgIHVuaXRzIGZvcm1hdCwgZWl0aGVyIG1ldHJpYyBvciBpbXBlcmlhbCwgZGVmYXVsdHMgdG8gJ21ldHJpYydcclxuXHQgKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgICAgYSBQcm9taXNlIHRoYXQgZXZlbnR1YWxseSByZXR1cm5zIGEgY3VzdG9tIG9iamVjdCB3aXRoIHJlc3BvbnNlLCBhbmQgcXVlcnkgcGFyYW1ldGVycyBcclxuXHQgKi9cblx0ZnVuY3Rpb24gZ2V0Rm9yZWNhc3QoKSB7XG5cdCAgICAndXNlIHN0cmljdCc7XG5cdFxuXHQgICAgdmFyIGNpdHkgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyAnTG9uZG9uJyA6IGFyZ3VtZW50c1swXTtcblx0ICAgIHZhciBjb3VudHJ5ID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxIHx8IGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkID8gJycgOiBhcmd1bWVudHNbMV07XG5cdCAgICB2YXIgdW5pdHMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDIgfHwgYXJndW1lbnRzWzJdID09PSB1bmRlZmluZWQgPyBfY29uc3RhbnRzLk1FVFJJQyA6IGFyZ3VtZW50c1syXTtcblx0ICAgIHZhciBxdWVyeVVSTCA9IGdldFF1ZXJ5VVJMKGNpdHksIGNvdW50cnksIHVuaXRzKTtcblx0XG5cdCAgICByZXR1cm4gZmV0Y2gocXVlcnlVUkwsIHtcblx0ICAgICAgICBtZXRob2Q6ICdnZXQnXG5cdCAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuXHRcblx0ICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpLnRoZW4oZnVuY3Rpb24gKHBhcnNlZERhdGEpIHtcblx0XG5cdCAgICAgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgICAgICAvLyBvcmlnaW5hbCByZXNwb25zZVxuXHQgICAgICAgICAgICAgICAgcmVzcG9uc2U6IHBhcnNlZERhdGEsXG5cdCAgICAgICAgICAgICAgICAvLyBxdWVyeSBwYXJhbXMgc2VudCB0byBBUElcblx0ICAgICAgICAgICAgICAgIHBhcmFtczoge1xuXHQgICAgICAgICAgICAgICAgICAgIGNpdHk6IGNpdHksXG5cdCAgICAgICAgICAgICAgICAgICAgY291bnRyeTogY291bnRyeSxcblx0ICAgICAgICAgICAgICAgICAgICB1bml0czogdW5pdHNcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfTtcblx0ICAgICAgICB9KTtcblx0ICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcblx0ICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG5cdCAgICB9KTtcblx0fVxuXG4vKioqLyB9LFxuLyogMyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0ZXhwb3J0cy5kZWZhdWx0ID0ge1xuXHQgICAgYXBpS2V5OiAnM2Y2OTc2NzU0MjRjM2QwYWZlYWZiZTAyNjEwY2UyNzQnXG5cdH07XG5cbi8qKiovIH0sXG4vKiA0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0dmFyIElNUEVSSUFMID0gZXhwb3J0cy5JTVBFUklBTCA9ICdpbXBlcmlhbCc7XG5cdHZhciBNRVRSSUMgPSBleHBvcnRzLk1FVFJJQyA9ICdtZXRyaWMnO1xuXG4vKioqLyB9LFxuLyogNSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0ZXhwb3J0cy5hcHBFdmVudEhhbmRsZXJzID0gdW5kZWZpbmVkO1xuXHRcblx0dmFyIF9jb25zdGFudHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXHRcblx0dmFyIGFwcEV2ZW50SGFuZGxlcnMgPSBleHBvcnRzLmFwcEV2ZW50SGFuZGxlcnMgPSB7XG5cdCAgICBvblNlYXJjaDogbnVsbCxcblx0ICAgIG9uUmVmcmVzaDogbnVsbFxuXHR9O1xuXHRcblx0dmFyIHNlYXJjaFRleHRJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzZWFyY2hUZXh0Jyk7XG5cdHZhciBzZWFyY2hCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2VhcmNoJyk7XG5cdHZhciB1bml0c0NudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN1bml0cycpO1xuXHRcblx0Ly8gZGVmYXVsdFxuXHR2YXIgdW5pdHNGb3JtYXQgPSBfY29uc3RhbnRzLk1FVFJJQztcblx0XG5cdC8vIGEgYml0IG9mIGV2ZW50IGRlbGVnYXRpb25cblx0dW5pdHNDbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXYpIHtcblx0ICAgICd1c2Ugc3RyaWN0Jztcblx0XG5cdCAgICB2YXIgbm9kZU5hbWUgPSBldi50YXJnZXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XG5cdCAgICBpZiAobm9kZU5hbWUgPT09ICdpbnB1dCcpIHtcblx0ICAgICAgICB1bml0c0Zvcm1hdCA9IGV2LnRhcmdldC52YWx1ZTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgICAgdW5pdHNGb3JtYXQgPSBldi50YXJnZXQuY29udHJvbC52YWx1ZTtcblx0ICAgIH1cblx0fSk7XG5cdFxuXHQvLyBsaXN0ZW5zIGZvciB1c2VyJ3Mga2VwcmVzc2VzLCBhbmQgcGFzc2VzIGRhdGEgdG8gY29udHJvbGxlclxuXHRzZWFyY2hUZXh0SW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigna2V5cHJlc3MnLCBmdW5jdGlvbiAoZXYpIHtcblx0ICAgICd1c2Ugc3RyaWN0Jztcblx0XG5cdCAgICAvLyBvbmx5IG9uIGVudGVyXG5cdFxuXHQgICAgaWYgKGV2LmtleUNvZGUgPT09IDEzKSB7XG5cdFxuXHQgICAgICAgIC8vIGlmIGNhbGxiYWNrIGlzIGNvbmZpZ3VyZWRcblx0ICAgICAgICBpZiAoYXBwRXZlbnRIYW5kbGVycy5vblNlYXJjaCAmJiBzZWFyY2hUZXh0SW5wdXQudmFsdWUpIHtcblx0ICAgICAgICAgICAgYXBwRXZlbnRIYW5kbGVycy5vblNlYXJjaChzZWFyY2hUZXh0SW5wdXQudmFsdWUsIHVuaXRzRm9ybWF0KTtcblx0XG5cdCAgICAgICAgICAgIC8vIHJlc2V0IHRoZSBzZWFyY2ggaW5wdXRcblx0ICAgICAgICAgICAgc2VhcmNoVGV4dElucHV0LnZhbHVlID0gJyc7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHR9KTtcblx0XG5cdC8vIGxpc3RlbnMgZm9yIHVzZXIncyBjbGlja3MsIGFuZCBwYXNzZXMgZGF0YSB0byBjb250cm9sbGVyXG5cdHNlYXJjaEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcblx0ICAgICd1c2Ugc3RyaWN0Jztcblx0XG5cdCAgICAvLyBpZiBjYWxsYmFjayBpcyBjb25maWd1cmVkXG5cdFxuXHQgICAgaWYgKGFwcEV2ZW50SGFuZGxlcnMub25TZWFyY2ggJiYgc2VhcmNoVGV4dElucHV0LnZhbHVlKSB7XG5cdCAgICAgICAgYXBwRXZlbnRIYW5kbGVycy5vblNlYXJjaChzZWFyY2hUZXh0SW5wdXQudmFsdWUsIHVuaXRzRm9ybWF0KTtcblx0XG5cdCAgICAgICAgLy8gcmVzZXQgdGhlIHNlYXJjaCBpbnB1dFxuXHQgICAgICAgIHNlYXJjaFRleHRJbnB1dC52YWx1ZSA9ICcnO1xuXHQgICAgfVxuXHR9KTtcblxuLyoqKi8gfSxcbi8qIDYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGV4cG9ydHMuZm9yZWNhc3RFdmVudEhhbmRsZXJzID0gZXhwb3J0cy52aWV3U3RhdGUgPSB1bmRlZmluZWQ7XG5cdGV4cG9ydHMudXBkYXRlRm9yZWNhc3QgPSB1cGRhdGVGb3JlY2FzdDtcblx0ZXhwb3J0cy5nZXROZXh0RGF0YSA9IGdldE5leHREYXRhO1xuXHRleHBvcnRzLmdldFByZXZEYXRhID0gZ2V0UHJldkRhdGE7XG5cdFxuXHR2YXIgX2NvbnN0YW50cyA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cdFxuXHR2YXIgZm9yZWNhc3RDbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZm9yZWNhc3QnKTtcblx0dmFyIGNpdHlDbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZm9yZWNhc3QgLmNpdHknKTtcblx0dmFyIHJhaW5DbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucmFpbiA+IHNwYW4nKTtcblx0dmFyIHRlbXBDbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGVtcCA+IHNwYW4nKTtcblx0dmFyIHByZXNDbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJlcyA+IHNwYW4nKTtcblx0dmFyIGNsb3Vkc0NudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jbG91ZHMgPiBzcGFuJyk7XG5cdHZhciBkYXRlQ250ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRpbWUgPiBoMicpO1xuXHR2YXIgdGltZUNudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50aW1lID4gaDMnKTtcblx0dmFyIG5leHRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYWN0aW9ucyA+IC5uZXh0Jyk7XG5cdHZhciBwcmV2QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFjdGlvbnMgPiAucHJldicpO1xuXHRcblx0dmFyIHZpZXdTdGF0ZSA9IGV4cG9ydHMudmlld1N0YXRlID0ge1xuXHQgICAgbmV4dDogdHJ1ZSxcblx0ICAgIHByZXY6IHRydWUsXG5cdCAgICBsb2FkaW5nOiB0cnVlXG5cdH07XG5cdFxuXHR2YXIgZm9yZWNhc3RFdmVudEhhbmRsZXJzID0gZXhwb3J0cy5mb3JlY2FzdEV2ZW50SGFuZGxlcnMgPSB7XG5cdCAgICBvbk5leHQ6IG51bGwsXG5cdCAgICBvblByZXY6IG51bGxcblx0fTtcblx0XG5cdC8qKlxyXG5cdCAqIFJlbmRlcnMgdmFsdWVzIGludG8gdGhlIGh0bWwgdXNpbmcgaHRtbCB0ZW1wbGF0ZSBzdHJpbmdzLlxyXG5cdCAqIFxyXG5cdCAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9ucy5yZXNwb25zZSAgICB0aGUgcmVzcG9uc2Ugb2JqZWN0IGZvciBhIHNpbmdsZSBmb3JlY2FzdFxyXG5cdCAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9ucy5wYXJhbXMgICAgICB0aGVlIHF1ZXJ5IHBhcmFtZXRlcnNcclxuXHQgKiBAcmV0dXJuIHt1bmRlZmluZWR9XHJcblx0ICovXG5cdGZ1bmN0aW9uIHJlbmRlcihfcmVmKSB7XG5cdCAgICAndXNlIHN0cmljdCc7XG5cdFxuXHQgICAgdmFyIHJlc3BvbnNlID0gX3JlZi5yZXNwb25zZTtcblx0ICAgIHZhciBwYXJhbXMgPSBfcmVmLnBhcmFtcztcblx0ICAgIHZhciBfcmVzcG9uc2UkY2l0eSA9IHJlc3BvbnNlLmNpdHk7XG5cdCAgICB2YXIgbmFtZSA9IF9yZXNwb25zZSRjaXR5Lm5hbWU7XG5cdCAgICB2YXIgY291bnRyeSA9IF9yZXNwb25zZSRjaXR5LmNvdW50cnk7XG5cdCAgICB2YXIgX3Jlc3BvbnNlJHNpbmdsZUZvcmVjID0gcmVzcG9uc2Uuc2luZ2xlRm9yZWNhc3Q7XG5cdCAgICB2YXIgcmFpbiA9IF9yZXNwb25zZSRzaW5nbGVGb3JlYy5yYWluO1xuXHQgICAgdmFyIG1haW4gPSBfcmVzcG9uc2Ukc2luZ2xlRm9yZWMubWFpbjtcblx0ICAgIHZhciBjbG91ZHMgPSBfcmVzcG9uc2Ukc2luZ2xlRm9yZWMuY2xvdWRzO1xuXHQgICAgdmFyIGR0ID0gX3Jlc3BvbnNlJHNpbmdsZUZvcmVjLmR0O1xuXHRcblx0ICAgIC8vIGNvbnZlcnQgVU5JWCB0aW1lc3RhbXAgdG8gbWlsbGlzZWNvbmRzXG5cdFxuXHQgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShkdCAqIDEwMDApO1xuXHQgICAgdmFyIHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG5cdFxuXHQgICAgLy8gcGFyc2luZyBkYXRlIC0gdWdoXG5cdCAgICB2YXIgZGF5ID0gZGF0ZS5nZXRVVENEYXRlKCk7XG5cdCAgICBkYXkgPSBkYXkgPCAxMCA/ICcwJyArIGRheSA6IGRheTtcblx0XG5cdCAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCkgKyAxO1xuXHQgICAgbW9udGggPSBtb250aCA8IDEwID8gJzAnICsgbW9udGggOiBtb250aDtcblx0XG5cdCAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG5cdCAgICBob3VycyA9IGhvdXJzIDwgMTAgPyAnMCcgKyBob3VycyA6IGhvdXJzO1xuXHRcblx0ICAgIHZhciBtaW51dGVzID0gZGF0ZS5nZXRVVENNaW51dGVzKCk7XG5cdCAgICBtaW51dGVzID0gbWludXRlcyA8IDEwID8gJzAnICsgbWludXRlcyA6IG1pbnV0ZXM7XG5cdFxuXHQgICAgdmFyIHNlY29uZHMgPSBkYXRlLmdldFVUQ1NlY29uZHMoKTtcblx0ICAgIHNlY29uZHMgPSBzZWNvbmRzIDwgMTAgPyAnMCcgKyBzZWNvbmRzIDogc2Vjb25kcztcblx0XG5cdCAgICAvLyBubyBvcHRpbWl6ZWRcblx0ICAgIC8vIFRPRE8gZGlmZiBjb250ZW50LCBhbmQgb25seSBvdmVyd3JpdGUgd2hlcmUgdGhlcmUncyBhIGNoYW5nZVxuXHQgICAgY2l0eUNudC5pbm5lckhUTUwgPSBuYW1lICsgJywgJyArIGNvdW50cnk7XG5cdCAgICByYWluQ250LmlubmVySFRNTCA9IChyYWluICYmIHJhaW5bJzNoJ10gfHwgMCkgKyAnIG1tJztcblx0ICAgIHRlbXBDbnQuaW5uZXJIVE1MID0gJycgKyBNYXRoLnJvdW5kKG1haW4udGVtcCkgKyAocGFyYW1zLnVuaXRzID09PSBfY29uc3RhbnRzLklNUEVSSUFMID8gJyZkZWc7RicgOiAnJmRlZztDJyk7XG5cdCAgICBwcmVzQ250LmlubmVySFRNTCA9IE1hdGgucm91bmQobWFpbi5wcmVzc3VyZSkgKyAnIGhQYSc7XG5cdCAgICBjbG91ZHNDbnQuaW5uZXJIVE1MID0gY2xvdWRzLmFsbCArICclJztcblx0ICAgIGRhdGVDbnQuaW5uZXJIVE1MID0gZGF5ICsgJy8nICsgbW9udGggKyAnLycgKyB5ZWFyO1xuXHQgICAgdGltZUNudC5pbm5lckhUTUwgPSBob3VycyArICc6JyArIG1pbnV0ZXMgKyAnOicgKyBzZWNvbmRzO1xuXHRcblx0ICAgIC8vIG5vdCBvcHRpbWl6ZWRcblx0ICAgIC8vIGFjdGlvbnMgYXMgYWJvdmVcblx0ICAgIG5leHRCdXR0b24uZGlzYWJsZWQgPSB2aWV3U3RhdGUubmV4dCA/IGZhbHNlIDogdHJ1ZTtcblx0ICAgIHByZXZCdXR0b24uZGlzYWJsZWQgPSB2aWV3U3RhdGUucHJldiA/IGZhbHNlIDogdHJ1ZTtcblx0XG5cdCAgICBmb3JlY2FzdENudC5jbGFzc05hbWUgPSB2aWV3U3RhdGUubG9hZGluZyA/IGZvcmVjYXN0Q250LmNsYXNzTmFtZSArICcgbG9hZGluZycgOiBmb3JlY2FzdENudC5jbGFzc05hbWUucmVwbGFjZSgvXFxzbG9hZGluZy8sICcnKTtcblx0fVxuXHRcblx0LyoqXHJcblx0ICogQW4gZXhwb3NlZCB3cmFwcGVyIGZvciBhIHJlbmRlciBtZXRob2QuXHJcblx0ICogXHJcblx0ICogQHBhcmFtICB7T2JqZWN0fSBmb3JlY2FzdERhdGEgICAgYSBiZXNwb2tlIG9iamVjdCB3aXRoIHJlc3BvbnNlIGRhdGEgZm9yIGEgc2luZ2xlIGZvcmVjYXN0LFxyXG5cdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBxdWVyeSBwYXJhbXNcclxuXHQgKiBAcmV0dXJuIHt1bmRlZmluZWR9XHJcblx0ICovXG5cdGZ1bmN0aW9uIHVwZGF0ZUZvcmVjYXN0KGZvcmVjYXN0RGF0YSkge1xuXHQgICAgJ3VzZSBzdHJpY3QnO1xuXHRcblx0ICAgIHJlbmRlcihmb3JlY2FzdERhdGEpO1xuXHR9XG5cdFxuXHQvKipcclxuXHQgKiBBbiBleHBvc2VkIHdyYXBwZXIgZm9yIGEgcmVuZGVyIG1ldGhvZC5cclxuXHQgKiAgXHJcblx0ICogQHBhcmFtICB7T2JqZWN0fSBuZXh0RGF0YSAgICBhIGJlc3Bva2Ugb2JqZWN0IHdpdGggcmVzcG9uc2UgZGF0YSBmb3IgYSBzaW5nbGUgZm9yZWNhc3RcclxuXHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBxdWVyeSBwYXJhbXMsIGl0IHRoZSBuZXh0IGZvcmVjYXN0IGluIHRoZSBzZXRcclxuXHQgKiBAcmV0dXJuIHt1bmRlZmluZWR9XHJcblx0ICovXG5cdGZ1bmN0aW9uIGdldE5leHREYXRhKG5leHREYXRhKSB7XG5cdCAgICAndXNlIHN0cmljdCc7XG5cdFxuXHQgICAgcmVuZGVyKG5leHREYXRhKTtcblx0fVxuXHRcblx0LyoqXHJcblx0ICogQW4gZXhwb3NlZCB3cmFwcGVyIGZvciBhIHJlbmRlciBtZXRob2QuXHJcblx0ICogIFxyXG5cdCAqIEBwYXJhbSAge09iamVjdH0gcHJldkRhdGEgICAgYSBiZXNwb2tlIG9iamVjdCB3aXRoIHJlc3BvbnNlIGRhdGEgZm9yIGEgc2luZ2xlIGZvcmVjYXN0XHJcblx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgcXVlcnkgcGFyYW1zLCBpdCB0aGUgcHJldmlvdXMgZm9yZWNhc3QgaW4gdGhlIHNldFxyXG5cdCAqIEByZXR1cm4ge3VuZGVmaW5lZH1cclxuXHQgKi9cblx0ZnVuY3Rpb24gZ2V0UHJldkRhdGEocHJldkRhdGEpIHtcblx0ICAgICd1c2Ugc3RyaWN0Jztcblx0XG5cdCAgICByZW5kZXIocHJldkRhdGEpO1xuXHR9XG5cdFxuXHQvLyBldmVudCBsaXN0ZW5lcnMgZm9yIHZpZXcgYWN0aW9uc1xuXHRuZXh0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuXHQgICAgJ3VzZSBzdHJpY3QnO1xuXHRcblx0ICAgIC8vIGlmIGNhbGxiYWNrIGlzIGNvbmZpZ3VyZWRcblx0XG5cdCAgICBpZiAoZm9yZWNhc3RFdmVudEhhbmRsZXJzLm9uTmV4dCkge1xuXHQgICAgICAgIGZvcmVjYXN0RXZlbnRIYW5kbGVycy5vbk5leHQoKTtcblx0ICAgIH1cblx0fSk7XG5cdFxuXHRwcmV2QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuXHQgICAgJ3VzZSBzdHJpY3QnO1xuXHRcblx0ICAgIC8vIGlmIGNhbGxiYWNrIGlzIGNvbmZpZ3VyZWRcblx0XG5cdCAgICBpZiAoZm9yZWNhc3RFdmVudEhhbmRsZXJzLm9uUHJldikge1xuXHQgICAgICAgIGZvcmVjYXN0RXZlbnRIYW5kbGVycy5vblByZXYoKTtcblx0ICAgIH1cblx0fSk7XG5cbi8qKiovIH1cbi8qKioqKiovIF0pO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIGFwcC9hcHAuanNcbiAqKi8iLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcblxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0ZXhwb3J0czoge30sXG4gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuIFx0XHRcdGxvYWRlZDogZmFsc2VcbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHdlYnBhY2svYm9vdHN0cmFwIDU3Njc1M2I1OWQ0MmY2NzI5YTAxXG4gKiovIiwiLy8gZW50cnkgcG9pbnQgZm9yIHdlYnBhY2tcclxuaW1wb3J0ICcuL2FwcC5jb250cm9sbGVycy5qcyc7XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9hcHAvYXBwLmpzXG4gKiovIiwiaW1wb3J0IHtnZXRGb3JlY2FzdH0gZnJvbSAnLi9mb3JlY2FzdC9mb3JlY2FzdC5zZXJ2aWNlcy5qcyc7XHJcbmltcG9ydCB7YXBwRXZlbnRIYW5kbGVyc30gZnJvbSAnLi9hcHAudmlld3MuanMnO1xyXG5pbXBvcnQge3VwZGF0ZUZvcmVjYXN0LCBmb3JlY2FzdEV2ZW50SGFuZGxlcnMsIHZpZXdTdGF0ZX0gZnJvbSAnLi9mb3JlY2FzdC9mb3JlY2FzdC52aWV3cy5qcyc7XHJcblxyXG4vLyBob2xkcyBjdXJyZW50IGZvcmVjYXN0IGRhdGEgZm9ybSBBUElcclxubGV0IGN1cnJlbnREYXRhO1xyXG4vLyB0aGUgaW5kZXggb2YgdGhlIGN1cnJlbnQgKHNpbmdsZSkgZm9yZWNhc3RcclxubGV0IGN1cnJlbnRGb3JjYXN0SW5kZXggPSAwO1xyXG5cclxuLyoqXHJcbiAqIFByZXBhcmVzIGRhdGEgZm9yIHRoZSB2aWV3LCBhbmQgYW5kIHVwZGF0ZXMgaXQuXHJcbiAqIFxyXG4gKiBAcGFyYW0gIHtPYmplY3R9IGZvcmVjYXN0RGF0YSAgICBiZXNwb2tlIGRhdGEgb2JqZWN0IGNvbnRhaW5pbmcgYm90aCB0aGUgb3JpZ2luYWwgcmVzcG9uc2UgYW5kIHF1ZXJ5IHBhcmFtc1xyXG4gKiBAcmV0dXJuIHt1bmRlZmluZWR9XHJcbiAqL1xyXG5mdW5jdGlvbiB1cGRhdGVGb3JlY2FzdFZpZXcoe3BhcmFtcywgcmVzcG9uc2V9KSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdXBkYXRlRm9yZWNhc3Qoe1xyXG4gICAgICAgIHBhcmFtczogcGFyYW1zLFxyXG4gICAgICAgIHJlc3BvbnNlOiB7XHJcbiAgICAgICAgICAgIGNpdHk6IHJlc3BvbnNlLmNpdHksXHJcbiAgICAgICAgICAgIHNpbmdsZUZvcmVjYXN0OiByZXNwb25zZS5saXN0W2N1cnJlbnRGb3JjYXN0SW5kZXhdXHJcbiAgICAgICAgfVxyXG4gICAgfSk7ICAgXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBIGhhbmRsZXIgZm9yIHRoZSBvbiBzZWFyY2ggZXZlbnQuXHJcbiAqIENhbGxzIHNlcnZpY2UgbWV0aG9kIHRvIGdldCBmb3JlY2FzdCBkYXRhIGZyb20gQVBJLlxyXG4gKiBcclxuICogQHBhcmFtICB7U3RyaW5nfSBzZWFyY2hUZXh0ICB0aGUgdGV4dCB0aGF0IHVzZXIgZW50ZXJlZCBpbiB0aGUgc2VhcmNoIGJveFxyXG4gKiBAcGFyYW0gIHtTdHJpbmd9IHVuaXRzICAgICAgIGVpdGhlciAnbWV0cmljJyBvciAnaW1wZXJpYWwnXHJcbiAqIEByZXR1cm4ge3VuZGVmaW5lZH1cclxuICovXHJcbmFwcEV2ZW50SGFuZGxlcnMub25TZWFyY2ggPSAoc2VhcmNoVGV4dCwgdW5pdHMpID0+IHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2aWV3U3RhdGUubG9hZGluZyA9IHRydWU7XHJcbiAgICB1cGRhdGVGb3JlY2FzdFZpZXcoY3VycmVudERhdGEpO1xyXG5cclxuICAgIGxldCBbY2l0eSwgY291bnRyeV0gPSBzZWFyY2hUZXh0LnNwbGl0KCcsJyk7XHJcblxyXG4gICAgZ2V0Rm9yZWNhc3QoY2l0eSwgY291bnRyeSwgdW5pdHMpXHJcbiAgICAgICAgLnRoZW4oKGZvcmVjYXN0RGF0YSkgPT4ge1xyXG4gICAgICAgICAgICAvLyByZWZyZXNoIGRhdGFcclxuICAgICAgICAgICAgY3VycmVudERhdGEgPSBmb3JlY2FzdERhdGE7XHJcbiAgICAgICAgICAgIC8vIHJlc2V0IGluZGV4XHJcbiAgICAgICAgICAgIGN1cnJlbnRGb3JjYXN0SW5kZXggPSAwO1xyXG5cclxuICAgICAgICAgICAgdmlld1N0YXRlLnByZXYgPSBmYWxzZTtcclxuICAgICAgICAgICAgdmlld1N0YXRlLmxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgdXBkYXRlRm9yZWNhc3RWaWV3KGN1cnJlbnREYXRhKTtcclxuICAgICAgICB9KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBBIGhhbmRsZXIgZm9yIHRoZSBvbiBuZXh0IGV2ZW50LlxyXG4gKiBVcGRhdGVzIGZpcmVjdCB2aWV3IGlmIHVwZGF0ZSBpcyBhdmFpbGFibGUuXHJcbiAqIFxyXG4gKiBAcmV0dXJuIHt1bmRlZmluZWR9XHJcbiAqL1xyXG5mb3JlY2FzdEV2ZW50SGFuZGxlcnMub25OZXh0ID0gKCkgPT4ge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGlmIChjdXJyZW50Rm9yY2FzdEluZGV4ICsgMSA8IGN1cnJlbnREYXRhLnJlc3BvbnNlLmxpc3QubGVuZ3RoKSB7XHJcbiAgICAgICAgY3VycmVudEZvcmNhc3RJbmRleCsrO1xyXG4gICAgICAgIHZpZXdTdGF0ZS5uZXh0ID0gdHJ1ZTtcclxuICAgICAgICB2aWV3U3RhdGUucHJldiA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB2aWV3U3RhdGUubmV4dCA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZUZvcmVjYXN0VmlldyhjdXJyZW50RGF0YSk7XHJcbn07XHJcblxyXG4vKipcclxuICogQSBoYW5kbGVyIGZvciB0aGUgb24gcHJldiBldmVudC5cclxuICogVXBkYXRlcyBmaXJlY3QgdmlldyBpZiB1cGRhdGUgaXMgYXZhaWxhYmxlLlxyXG4gKiBcclxuICogQHJldHVybiB7dW5kZWZpbmVkfVxyXG4gKi9cclxuZm9yZWNhc3RFdmVudEhhbmRsZXJzLm9uUHJldiA9ICgpID0+IHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBpZiAoY3VycmVudEZvcmNhc3RJbmRleCAtIDEgPj0gMCkge1xyXG4gICAgICAgIGN1cnJlbnRGb3JjYXN0SW5kZXgtLTtcclxuICAgICAgICB2aWV3U3RhdGUubmV4dCA9IHRydWU7XHJcbiAgICAgICAgdmlld1N0YXRlLnByZXYgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdmlld1N0YXRlLnByZXYgPSBmYWxzZTtcclxuICAgIH0gICAgXHJcblxyXG4gICAgdXBkYXRlRm9yZWNhc3RWaWV3KGN1cnJlbnREYXRhKTtcclxufTtcclxuXHJcbi8vIGluaXRcclxuZ2V0Rm9yZWNhc3QoKVxyXG4gICAgLnRoZW4oKGZvcmVjYXN0RGF0YSkgPT4ge1xyXG4gICAgICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICAgICAgLy8gcmVmcmVzaCBkYXRhXHJcbiAgICAgICAgY3VycmVudERhdGEgPSBmb3JlY2FzdERhdGE7XHJcbiAgICAgICAgLy8gcmVzZXQgaW5kZXhcclxuICAgICAgICBjdXJyZW50Rm9yY2FzdEluZGV4ID0gMDtcclxuICAgICAgICBcclxuICAgICAgICAvLyBzZXR1cCB0aGUgdmlld1xyXG4gICAgICAgIHZpZXdTdGF0ZS5sb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgdmlld1N0YXRlLnByZXYgPSBmYWxzZTtcclxuICAgICAgICB1cGRhdGVGb3JlY2FzdFZpZXcoY3VycmVudERhdGEpO1xyXG4gICAgfSk7XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9hcHAvYXBwLmNvbnRyb2xsZXJzLmpzXG4gKiovIiwiaW1wb3J0IGNvbmZpZyBmcm9tICcuLi9jb25maWcuanMnO1xyXG5pbXBvcnQge0lNUEVSSUFMLCBNRVRSSUN9IGZyb20gJy4uL2NvbnN0YW50cy5qcyc7XHJcblxyXG4vKipcclxuICogUGFyc2UgYW5kIHJldHVybiBhbiBBUEkgcXVlcnkgVVJMLlxyXG4gKiBcclxuICogQHBhcmFtICB7U3RyaW5nfSBjaXR5ICAgIHRoZSBuYW1lIG9mIGEgY2l0eVxyXG4gKiBAcGFyYW0gIHtTdHJpbmd9IGNvdW50cnkgdGhlIG5hbWUgb2YgYSBjb3VudHJ5XHJcbiAqIEBwYXJhbSAge1N0cmluZ30gdW5pdHMgICB1bml0cyBmb3JtYXQsIGVpdGhlciBtZXRyaWMgb3IgaW1wZXJpYWxcclxuICogQHJldHVybiB7U3RyaW5nfSAgICAgICAgIHRoZSBwYXJzZWQgdGVtcGxhdGUgc3RyaW5nXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRRdWVyeVVSTChjaXR5LCBjb3VudHJ5LCB1bml0cykge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHJldHVybiBgaHR0cDovL2FwaS5vcGVud2VhdGhlcm1hcC5vcmcvZGF0YS8yLjUvZm9yZWNhc3Q/cT0ke2NpdHl9LCR7Y291bnRyeX0mbW9kZT1qc29uJmFwcGlkPSR7Y29uZmlnLmFwaUtleX0mdW5pdHM9JHt1bml0c31gO1xyXG59XHJcblxyXG4vKipcclxuICogR2V0IGZvcmVjYXN0IGRhdGEgZnJvbSBhcGkgZm9yIGdpdmVuIGxvY2F0aW9uLlxyXG4gKiBcclxuICogQHBhcmFtICB7U3RyaW5nfSBjaXR5ICAgIHRoZSBuYW1lIG9mIGEgY2l0eSwgZGVmYXVsdHMgdG8gJ0xvbmRvbidcclxuICogQHBhcmFtICB7U3RyaW5nfSBjb3VudHJ5IHRoZSBuYW1lIG9mIGEgY291bnRyeSwgZGVmYXVsdHMgdG8gJydcclxuICogQHBhcmFtICB7U3RyaW5nfSB1bml0cyAgIHVuaXRzIGZvcm1hdCwgZWl0aGVyIG1ldHJpYyBvciBpbXBlcmlhbCwgZGVmYXVsdHMgdG8gJ21ldHJpYydcclxuICogQHJldHVybiB7UHJvbWlzZX0gICAgICAgIGEgUHJvbWlzZSB0aGF0IGV2ZW50dWFsbHkgcmV0dXJucyBhIGN1c3RvbSBvYmplY3Qgd2l0aCByZXNwb25zZSwgYW5kIHF1ZXJ5IHBhcmFtZXRlcnMgXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0Rm9yZWNhc3QoY2l0eSA9ICdMb25kb24nLCBjb3VudHJ5ID0gJycsIHVuaXRzID0gTUVUUklDKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgY29uc3QgcXVlcnlVUkwgPSBnZXRRdWVyeVVSTChjaXR5LCBjb3VudHJ5LCB1bml0cyk7XHJcblxyXG4gICAgcmV0dXJuIGZldGNoKHF1ZXJ5VVJMLCB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCdcclxuICAgICAgICB9KVxyXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpXHJcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihwYXJzZWREYXRhKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9yaWdpbmFsIHJlc3BvbnNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlOiBwYXJzZWREYXRhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBxdWVyeSBwYXJhbXMgc2VudCB0byBBUElcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaXR5OiBjaXR5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnRyeTogY291bnRyeSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXRzOiB1bml0c1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICAgICAgfSk7XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9hcHAvZm9yZWNhc3QvZm9yZWNhc3Quc2VydmljZXMuanNcbiAqKi8iLCJleHBvcnQgZGVmYXVsdCB7XHJcbiAgICBhcGlLZXk6ICczZjY5NzY3NTQyNGMzZDBhZmVhZmJlMDI2MTBjZTI3NCdcclxufTtcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2FwcC9jb25maWcuanNcbiAqKi8iLCJleHBvcnQgY29uc3QgSU1QRVJJQUwgPSAnaW1wZXJpYWwnO1xyXG5leHBvcnQgY29uc3QgTUVUUklDID0gJ21ldHJpYyc7XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9hcHAvY29uc3RhbnRzLmpzXG4gKiovIiwiaW1wb3J0IHtNRVRSSUN9IGZyb20gJy4vY29uc3RhbnRzLmpzJztcclxuXHJcbmV4cG9ydCBsZXQgYXBwRXZlbnRIYW5kbGVycyA9IHtcclxuICAgIG9uU2VhcmNoOiBudWxsLFxyXG4gICAgb25SZWZyZXNoOiBudWxsXHJcbn07XHJcblxyXG5jb25zdCBzZWFyY2hUZXh0SW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2VhcmNoVGV4dCcpO1xyXG5jb25zdCBzZWFyY2hCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2VhcmNoJyk7XHJcbmNvbnN0IHVuaXRzQ250ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3VuaXRzJyk7XHJcblxyXG4vLyBkZWZhdWx0XHJcbmxldCB1bml0c0Zvcm1hdCAgPSBNRVRSSUM7XHJcblxyXG4vLyBhIGJpdCBvZiBldmVudCBkZWxlZ2F0aW9uXHJcbnVuaXRzQ250LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2KSA9PiB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgY29uc3Qgbm9kZU5hbWUgPSBldi50YXJnZXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcclxuXHJcbiAgICBpZiAobm9kZU5hbWUgPT09ICdpbnB1dCcpIHtcclxuICAgICAgICB1bml0c0Zvcm1hdCA9IGV2LnRhcmdldC52YWx1ZTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHVuaXRzRm9ybWF0ID0gZXYudGFyZ2V0LmNvbnRyb2wudmFsdWU7XHJcbiAgICB9XHJcbn0pO1xyXG5cclxuLy8gbGlzdGVucyBmb3IgdXNlcidzIGtlcHJlc3NlcywgYW5kIHBhc3NlcyBkYXRhIHRvIGNvbnRyb2xsZXJcclxuc2VhcmNoVGV4dElucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXByZXNzJywgKGV2KSA9PiB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgLy8gb25seSBvbiBlbnRlclxyXG4gICAgaWYgKGV2LmtleUNvZGUgPT09IDEzKSB7XHJcblxyXG4gICAgICAgIC8vIGlmIGNhbGxiYWNrIGlzIGNvbmZpZ3VyZWRcclxuICAgICAgICBpZiAoYXBwRXZlbnRIYW5kbGVycy5vblNlYXJjaCAmJiBzZWFyY2hUZXh0SW5wdXQudmFsdWUpIHtcclxuICAgICAgICAgICAgYXBwRXZlbnRIYW5kbGVycy5vblNlYXJjaChzZWFyY2hUZXh0SW5wdXQudmFsdWUsIHVuaXRzRm9ybWF0KTtcclxuXHJcbiAgICAgICAgICAgIC8vIHJlc2V0IHRoZSBzZWFyY2ggaW5wdXRcclxuICAgICAgICAgICAgc2VhcmNoVGV4dElucHV0LnZhbHVlID0gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KTtcclxuXHJcbi8vIGxpc3RlbnMgZm9yIHVzZXIncyBjbGlja3MsIGFuZCBwYXNzZXMgZGF0YSB0byBjb250cm9sbGVyXHJcbnNlYXJjaEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICAvLyBpZiBjYWxsYmFjayBpcyBjb25maWd1cmVkXHJcbiAgICBpZiAoYXBwRXZlbnRIYW5kbGVycy5vblNlYXJjaCAmJiBzZWFyY2hUZXh0SW5wdXQudmFsdWUpIHtcclxuICAgICAgICBhcHBFdmVudEhhbmRsZXJzLm9uU2VhcmNoKHNlYXJjaFRleHRJbnB1dC52YWx1ZSwgdW5pdHNGb3JtYXQpO1xyXG5cclxuICAgICAgICAvLyByZXNldCB0aGUgc2VhcmNoIGlucHV0XHJcbiAgICAgICAgc2VhcmNoVGV4dElucHV0LnZhbHVlID0gJyc7XHJcbiAgICB9XHJcbn0pO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vYXBwL2FwcC52aWV3cy5qc1xuICoqLyIsImltcG9ydCB7SU1QRVJJQUx9IGZyb20gJy4uL2NvbnN0YW50cy5qcyc7XHJcblxyXG5jb25zdCBmb3JlY2FzdENudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mb3JlY2FzdCcpO1xyXG5jb25zdCBjaXR5Q250ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZvcmVjYXN0IC5jaXR5Jyk7XHJcbmNvbnN0IHJhaW5DbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucmFpbiA+IHNwYW4nKTtcclxuY29uc3QgdGVtcENudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50ZW1wID4gc3BhbicpO1xyXG5jb25zdCBwcmVzQ250ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByZXMgPiBzcGFuJyk7XHJcbmNvbnN0IGNsb3Vkc0NudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jbG91ZHMgPiBzcGFuJyk7XHJcbmNvbnN0IGRhdGVDbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGltZSA+IGgyJyk7XHJcbmNvbnN0IHRpbWVDbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGltZSA+IGgzJyk7XHJcbmNvbnN0IG5leHRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYWN0aW9ucyA+IC5uZXh0Jyk7XHJcbmNvbnN0IHByZXZCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYWN0aW9ucyA+IC5wcmV2Jyk7XHJcblxyXG5leHBvcnQgbGV0IHZpZXdTdGF0ZSA9IHtcclxuICAgIG5leHQ6IHRydWUsXHJcbiAgICBwcmV2OiB0cnVlLFxyXG4gICAgbG9hZGluZzogdHJ1ZVxyXG59O1xyXG5cclxuZXhwb3J0IGxldCBmb3JlY2FzdEV2ZW50SGFuZGxlcnMgPSB7XHJcbiAgICBvbk5leHQ6IG51bGwsXHJcbiAgICBvblByZXY6IG51bGxcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZW5kZXJzIHZhbHVlcyBpbnRvIHRoZSBodG1sIHVzaW5nIGh0bWwgdGVtcGxhdGUgc3RyaW5ncy5cclxuICogXHJcbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9ucy5yZXNwb25zZSAgICB0aGUgcmVzcG9uc2Ugb2JqZWN0IGZvciBhIHNpbmdsZSBmb3JlY2FzdFxyXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnMucGFyYW1zICAgICAgdGhlZSBxdWVyeSBwYXJhbWV0ZXJzXHJcbiAqIEByZXR1cm4ge3VuZGVmaW5lZH1cclxuICovXHJcbmZ1bmN0aW9uIHJlbmRlcih7cmVzcG9uc2UsIHBhcmFtc30pIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBjb25zdCB7bmFtZSwgY291bnRyeX0gPSByZXNwb25zZS5jaXR5O1xyXG4gICAgY29uc3Qge3JhaW4sIG1haW4sIGNsb3VkcywgZHR9ID0gcmVzcG9uc2Uuc2luZ2xlRm9yZWNhc3Q7XHJcblxyXG4gICAgLy8gY29udmVydCBVTklYIHRpbWVzdGFtcCB0byBtaWxsaXNlY29uZHNcclxuICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShkdCoxMDAwKTtcclxuICAgIGNvbnN0IHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XHJcblxyXG4gICAgLy8gcGFyc2luZyBkYXRlIC0gdWdoXHJcbiAgICBsZXQgZGF5ID0gZGF0ZS5nZXRVVENEYXRlKCk7XHJcbiAgICBkYXkgPSBkYXkgPCAxMCA/IGAwJHtkYXl9YCA6IGRheTtcclxuXHJcbiAgICBsZXQgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCkgKyAxO1xyXG4gICAgbW9udGggPSBtb250aCA8IDEwID8gYDAke21vbnRofWAgOiBtb250aDtcclxuXHJcbiAgICBsZXQgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XHJcbiAgICBob3VycyA9IGhvdXJzIDwgMTAgPyBgMCR7aG91cnN9YCA6IGhvdXJzO1xyXG5cclxuICAgIGxldCBtaW51dGVzID0gZGF0ZS5nZXRVVENNaW51dGVzKCk7XHJcbiAgICBtaW51dGVzID0gbWludXRlcyA8IDEwID8gYDAke21pbnV0ZXN9YCA6IG1pbnV0ZXM7XHJcblxyXG4gICAgbGV0IHNlY29uZHMgPSBkYXRlLmdldFVUQ1NlY29uZHMoKTtcclxuICAgIHNlY29uZHMgPSBzZWNvbmRzIDwgMTAgPyBgMCR7c2Vjb25kc31gIDogc2Vjb25kcztcclxuXHJcbiAgICAvLyBubyBvcHRpbWl6ZWRcclxuICAgIC8vIFRPRE8gZGlmZiBjb250ZW50LCBhbmQgb25seSBvdmVyd3JpdGUgd2hlcmUgdGhlcmUncyBhIGNoYW5nZVxyXG4gICAgY2l0eUNudC5pbm5lckhUTUwgPSBgJHtuYW1lfSwgJHtjb3VudHJ5fWA7XHJcbiAgICByYWluQ250LmlubmVySFRNTCA9IGAke3JhaW4gJiYgcmFpblsnM2gnXSB8fCAwfSBtbWA7XHJcbiAgICB0ZW1wQ250LmlubmVySFRNTCA9IGAke01hdGgucm91bmQobWFpbi50ZW1wKX0keyhwYXJhbXMudW5pdHMgPT09IElNUEVSSUFMID8gJyZkZWc7RicgOiAnJmRlZztDJyl9YDtcclxuICAgIHByZXNDbnQuaW5uZXJIVE1MID0gYCR7TWF0aC5yb3VuZChtYWluLnByZXNzdXJlKX0gaFBhYDtcclxuICAgIGNsb3Vkc0NudC5pbm5lckhUTUwgPSBgJHtjbG91ZHMuYWxsfSVgO1xyXG4gICAgZGF0ZUNudC5pbm5lckhUTUwgPSBgJHtkYXl9LyR7bW9udGh9LyR7eWVhcn1gO1xyXG4gICAgdGltZUNudC5pbm5lckhUTUwgPSBgJHtob3Vyc306JHttaW51dGVzfToke3NlY29uZHN9YDtcclxuXHJcbiAgICAvLyBub3Qgb3B0aW1pemVkXHJcbiAgICAvLyBhY3Rpb25zIGFzIGFib3ZlXHJcbiAgICBuZXh0QnV0dG9uLmRpc2FibGVkID0gdmlld1N0YXRlLm5leHQgPyBmYWxzZSA6IHRydWU7XHJcbiAgICBwcmV2QnV0dG9uLmRpc2FibGVkID0gdmlld1N0YXRlLnByZXYgPyBmYWxzZSA6IHRydWU7XHJcblxyXG4gICAgZm9yZWNhc3RDbnQuY2xhc3NOYW1lID0gdmlld1N0YXRlLmxvYWRpbmcgPyBcclxuICAgICAgICBgJHtmb3JlY2FzdENudC5jbGFzc05hbWV9IGxvYWRpbmdgIDogXHJcbiAgICAgICAgZm9yZWNhc3RDbnQuY2xhc3NOYW1lLnJlcGxhY2UoL1xcc2xvYWRpbmcvLCAnJyk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBbiBleHBvc2VkIHdyYXBwZXIgZm9yIGEgcmVuZGVyIG1ldGhvZC5cclxuICogXHJcbiAqIEBwYXJhbSAge09iamVjdH0gZm9yZWNhc3REYXRhICAgIGEgYmVzcG9rZSBvYmplY3Qgd2l0aCByZXNwb25zZSBkYXRhIGZvciBhIHNpbmdsZSBmb3JlY2FzdCxcclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5kIHF1ZXJ5IHBhcmFtc1xyXG4gKiBAcmV0dXJuIHt1bmRlZmluZWR9XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlRm9yZWNhc3QoZm9yZWNhc3REYXRhKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICByZW5kZXIoZm9yZWNhc3REYXRhKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFuIGV4cG9zZWQgd3JhcHBlciBmb3IgYSByZW5kZXIgbWV0aG9kLlxyXG4gKiAgXHJcbiAqIEBwYXJhbSAge09iamVjdH0gbmV4dERhdGEgICAgYSBiZXNwb2tlIG9iamVjdCB3aXRoIHJlc3BvbnNlIGRhdGEgZm9yIGEgc2luZ2xlIGZvcmVjYXN0XHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5kIHF1ZXJ5IHBhcmFtcywgaXQgdGhlIG5leHQgZm9yZWNhc3QgaW4gdGhlIHNldFxyXG4gKiBAcmV0dXJuIHt1bmRlZmluZWR9XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0TmV4dERhdGEobmV4dERhdGEpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIHJlbmRlcihuZXh0RGF0YSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBbiBleHBvc2VkIHdyYXBwZXIgZm9yIGEgcmVuZGVyIG1ldGhvZC5cclxuICogIFxyXG4gKiBAcGFyYW0gIHtPYmplY3R9IHByZXZEYXRhICAgIGEgYmVzcG9rZSBvYmplY3Qgd2l0aCByZXNwb25zZSBkYXRhIGZvciBhIHNpbmdsZSBmb3JlY2FzdFxyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBxdWVyeSBwYXJhbXMsIGl0IHRoZSBwcmV2aW91cyBmb3JlY2FzdCBpbiB0aGUgc2V0XHJcbiAqIEByZXR1cm4ge3VuZGVmaW5lZH1cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRQcmV2RGF0YShwcmV2RGF0YSkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgcmVuZGVyKHByZXZEYXRhKTtcclxufVxyXG4gXHJcbi8vIGV2ZW50IGxpc3RlbmVycyBmb3IgdmlldyBhY3Rpb25zXHJcbm5leHRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgLy8gaWYgY2FsbGJhY2sgaXMgY29uZmlndXJlZFxyXG4gICAgaWYgKGZvcmVjYXN0RXZlbnRIYW5kbGVycy5vbk5leHQpIHtcclxuICAgICAgICBmb3JlY2FzdEV2ZW50SGFuZGxlcnMub25OZXh0KCk7XHJcbiAgICB9XHJcbn0pO1xyXG5cclxucHJldkJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICAvLyBpZiBjYWxsYmFjayBpcyBjb25maWd1cmVkXHJcbiAgICBpZiAoZm9yZWNhc3RFdmVudEhhbmRsZXJzLm9uUHJldikge1xyXG4gICAgICAgIGZvcmVjYXN0RXZlbnRIYW5kbGVycy5vblByZXYoKTtcclxuICAgIH1cclxufSk7XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9hcHAvZm9yZWNhc3QvZm9yZWNhc3Qudmlld3MuanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9